import { Telegraf, Context } from 'telegraf';
import { message } from 'telegraf/filters';
import * as dotenv from 'dotenv';
import * as fs from 'fs';
import { Input } from 'telegraf/typings/core/types/typegram';
import { formatCardNumber, logWithTimestamp, delay } from './utils';
import { MESSAGES, BUTTON_LABELS, VIDEO_CAPTIONS, TIMING } from './constants';
import { validateReceiptWithGemini, validateReceiptSimple } from './receiptValidator';

dotenv.config();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface UserState {
  step: 'start' | 'video1' | 'video2' | 'video3' | 'payment_info' | 'waiting_receipt';
  userId: number;
  username?: string;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
const userStates = new Map<number, UserState>();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  botToken: process.env.BOT_TOKEN!,
  channelId: process.env.CHANNEL_ID!,
  channelInviteLink: process.env.CHANNEL_INVITE_LINK!,
  paymentAmount: parseInt(process.env.PAYMENT_AMOUNT || '2000'),
  cardNumber: process.env.CARD_NUMBER!,
  videos: [
    process.env.VIDEO_URL_1!,
    process.env.VIDEO_URL_2!,
    process.env.VIDEO_URL_3!
  ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(config.botToken);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;

  console.log(`User ${userId} (${username}) started the bot`);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userStates.set(userId, {
    step: 'start',
    userId,
    username
  });

  await ctx.reply(
    'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' +
    '–°–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∏–¥–µ–æ –æ –Ω–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ.\n\n' +
    'üìπ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!'
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
  await sendVideo(ctx, 0);
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
async function sendVideo(ctx: Context, videoIndex: number) {
  const userId = ctx.from!.id;
  const state = userStates.get(userId);

  if (!state) return;

  try {
    const videoPath = config.videos[videoIndex];
    
    logWithTimestamp(`Sending video ${videoIndex + 1}`, { userId, videoPath });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ URL
    if (videoPath.startsWith('http://') || videoPath.startsWith('https://')) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ URL
      await ctx.replyWithVideo(videoPath, {
        caption: `üìπ –í–∏–¥–µ–æ ${videoIndex + 1} –∏–∑ 3`
      });
    } else if (videoPath.startsWith('./') || videoPath.startsWith('/')) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      const { createReadStream } = await import('fs');
      const { Input } = await import('telegraf');
      
      await ctx.replyWithVideo(Input.fromLocalFile(videoPath), {
        caption: `üìπ –í–∏–¥–µ–æ ${videoIndex + 1} –∏–∑ 3`
      });
    } else {
      // –≠—Ç–æ file_id –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
      await ctx.replyWithVideo(videoPath, {
        caption: `üìπ –í–∏–¥–µ–æ ${videoIndex + 1} –∏–∑ 3`
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (videoIndex === 0) {
      state.step = 'video1';
    } else if (videoIndex === 1) {
      state.step = 'video2';
    } else if (videoIndex === 2) {
      state.step = 'video3';
    }

    userStates.set(userId, state);

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–∏–¥–µ–æ
    setTimeout(async () => {
      if (videoIndex < 2) {
        await sendVideo(ctx, videoIndex + 1);
      } else {
        // –í—Å–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
        await showPaymentButton(ctx);
      }
    }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –≤–∏–¥–µ–æ

  } catch (error) {
    console.error(`Error sending video ${videoIndex + 1}:`, error);
    await ctx.reply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.`);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
async function showPaymentButton(ctx: Context) {
  const userId = ctx.from!.id;
  const state = userStates.get(userId);

  if (!state) return;

  state.step = 'payment_info';
  userStates.set(userId, state);

  await ctx.reply(
    '‚úÖ –í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –≤–∏–¥–µ–æ!\n\n' +
    'üíé –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, ' +
    '–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø', callback_data: 'pay' }]
        ]
      }
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
bot.action('pay', async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  if (!state) {
    await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }

  await ctx.answerCbQuery();

  state.step = 'waiting_receipt';
  userStates.set(userId, state);

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formattedCard = config.cardNumber.replace(/(\d{4})(?=\d)/g, '$1 ');

  await ctx.reply(
    'üí≥ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n' +
    `üí∞ –°—É–º–º–∞: **${config.paymentAmount} —Ä—É–±–ª–µ–π**\n` +
    `üè¶ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: \`${formattedCard}\`\n\n` +
    'üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n' +
    '1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É\n' +
    '2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é\n' +
    '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n' +
    '‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–Ω–∞ —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è!\n\n' +
    'üëá –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —Å—é–¥–∞',
    { parse_mode: 'Markdown' }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (—Ñ–æ—Ç–æ)
bot.on(message('photo'), async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  if (!state || state.step !== 'waiting_receipt') {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }

  await ctx.reply('üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É –∫–≤–∏—Ç–∞–Ω—Ü–∏—é...');

  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ OCR –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
  // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  const isValid = await validateReceipt(ctx);

  if (isValid) {
    await ctx.reply('‚úÖ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É...');
    
    try {
      const inviteLink = await generateInviteLink(userId);
      
      await ctx.reply(
        'üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n' +
        `–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∫–∞–Ω–∞–ª:\n${inviteLink}\n\n` +
        '‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞\n' +
        'üë§ –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑\n\n' +
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! üöÄ',
        { parse_mode: 'Markdown' }
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates.delete(userId);

    } catch (error) {
      console.error('Error generating invite link:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  } else {
    await ctx.reply(
      '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n' +
      `‚úì –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${config.paymentAmount} —Ä—É–±–ª–µ–π\n` +
      `‚úì –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${config.cardNumber}\n` +
      '‚úì –ù–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —Å–Ω–æ–≤–∞.'
    );
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
async function validateReceipt(ctx: Context): Promise<boolean> {
  try {
    const photo = ctx.message && 'photo' in ctx.message ? ctx.message.photo : null;
    
    if (!photo || photo.length === 0) {
      return false;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    const fileId = photo[photo.length - 1].file_id;
    const file = await bot.telegram.getFile(fileId);
    
    if (!file.file_path) {
      logWithTimestamp('No file path available for photo');
      return false;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
    const photoUrl = `https://api.telegram.org/file/bot${config.botToken}/${file.file_path}`;
    
    logWithTimestamp('Validating receipt with Gemini', { 
      userId: ctx.from.id, 
      fileId 
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —á–µ—Ä–µ–∑ Gemini
    const validationResult = await validateReceiptWithGemini(
      photoUrl,
      config.paymentAmount,
      config.cardNumber
    );

    logWithTimestamp('Validation result', validationResult);

    // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (!validationResult.isValid && validationResult.reason) {
      await ctx.reply(
        `‚ùå ${validationResult.reason}\n\n` +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é.',
        { parse_mode: 'Markdown' }
      );
    }

    return validationResult.isValid;
    
  } catch (error) {
    logWithTimestamp('Error in validateReceipt', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    try {
      const photo = ctx.message && 'photo' in ctx.message ? ctx.message.photo : null;
      if (!photo || photo.length === 0) return false;
      
      const fileId = photo[photo.length - 1].file_id;
      const file = await bot.telegram.getFile(fileId);
      
      if (!file.file_path) return false;
      
      const photoUrl = `https://api.telegram.org/file/bot${config.botToken}/${file.file_path}`;
      
      const fallbackResult = await validateReceiptSimple(
        photoUrl,
        config.paymentAmount,
        config.cardNumber
      );
      
      if (fallbackResult.reason) {
        await ctx.reply(`‚ö†Ô∏è ${fallbackResult.reason}`);
      }
      
      return fallbackResult.isValid;
    } catch (fallbackError) {
      logWithTimestamp('Fallback validation also failed', fallbackError);
      return false;
    }
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è invite-—Å—Å—ã–ª–∫–∏
async function generateInviteLink(userId: number): Promise<string> {
  try {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é invite-—Å—Å—ã–ª–∫—É
    const inviteLink = await bot.telegram.createChatInviteLink(config.channelId, {
      member_limit: 1, // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      expire_date: Math.floor(Date.now() / 1000) + 86400 // 24 —á–∞—Å–∞
    });

    console.log(`Generated invite link for user ${userId}: ${inviteLink.invite_link}`);
    
    return inviteLink.invite_link;
  } catch (error) {
    console.error('Error creating invite link:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(message('text'), async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  if (!state) {
    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! üëã\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.'
    );
    return;
  }

  if (state.step === 'waiting_receipt') {
    await ctx.reply(
      'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.\n\n' +
      '–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const PORT = process.env.PORT || 3000;

bot.launch({
  webhook: process.env.NODE_ENV === 'production' ? {
    domain: process.env.RAILWAY_PUBLIC_DOMAIN || 'localhost',
    port: Number(PORT)
  } : undefined
}).then(() => {
  console.log('Bot is running...');
  console.log(`Environment: ${process.env.NODE_ENV}`);
  console.log(`Port: ${PORT}`);
});

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

export default bot;
