import 'reflect-metadata';
import { initializeDatabase } from './database';
import { UserService } from './userService';
import { Telegraf } from 'telegraf';
import * as dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN!);

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ retargeting –∫–∞–º–ø–∞–Ω–∏–π
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   npx ts-node src/retargeting.ts <campaign_type>
 * 
 * –¢–∏–ø—ã –∫–∞–º–ø–∞–Ω–∏–π:
 *   - stuck_video1: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –∑–∞—Å—Ç—Ä—è–ª –Ω–∞ video1
 *   - stuck_video2: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –∑–∞—Å—Ç—Ä—è–ª –Ω–∞ video2
 *   - abandoned_payment: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É
 *   - stats: –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏
 */

async function main() {
  const campaignType = process.argv[2];

  if (!campaignType) {
    console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx ts-node src/retargeting.ts <campaign_type>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:
  stuck_video1         - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞—Å—Ç—Ä—è–≤—à–∏–º –Ω–∞ video1 (24—á+)
  stuck_video2         - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞—Å—Ç—Ä—è–≤—à–∏–º –Ω–∞ video2 (24—á+)
  abandoned_payment    - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É (24—á+)
  stats                - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏
  conversion           - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ –æ–ø–ª–∞—Ç—É

–ü—Ä–∏–º–µ—Ä—ã:
  npm run retargeting stuck_video1
  npm run retargeting stats
    `);
    process.exit(0);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
  await initializeDatabase();
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

  const userService = new UserService();

  switch (campaignType) {
    case 'stuck_video1':
      await campaignStuckVideo1(userService);
      break;

    case 'stuck_video2':
      await campaignStuckVideo2(userService);
      break;

    case 'abandoned_payment':
      await campaignAbandonedPayment(userService);
      break;

    case 'stats':
      await showStats(userService);
      break;

    case 'conversion':
      await showConversion(userService);
      break;

    default:
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è: ${campaignType}`);
      process.exit(1);
  }

  process.exit(0);
}

/**
 * –ö–∞–º–ø–∞–Ω–∏—è: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞—Å—Ç—Ä—è–≤—à–∏–º –Ω–∞ video1
 */
async function campaignStuckVideo1(userService: UserService) {
  console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –Ω–∞ video1...');

  const users = await userService.getUsersStuckAtStep('video1', 24);

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

  if (users.length === 0) {
    console.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏');
    return;
  }

  const message = `
üëã –ü—Ä–∏–≤–µ—Ç!

–Ø –∑–∞–º–µ—Ç–∏–ª–∞, —á—Ç–æ —Ç—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∏–ª.

–£ –º–µ–Ω—è –µ—Å—Ç—å –µ—â—ë 2 –∫—Ä—É—Ç—ã—Ö –≤–∏–¥–µ–æ, –≥–¥–µ —è –ø–æ–∫–∞–∑—ã–≤–∞—é:
üéØ –ö–∞–∫ —è –ø–æ–ª—É—á–∞—é 9 –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
üéØ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–∑—Ä—ã–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞

–ü—Ä–æ–¥–æ–ª–∂–∏—à—å —Å–º–æ—Ç—Ä–µ—Ç—å?
  `;

  let sent = 0;
  let failed = 0;

  for (const user of users) {
    try {
      await bot.telegram.sendMessage(user.userId, message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ', callback_data: 'continue_watching' }]
          ]
        }
      });
      sent++;
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${user.userId} (@${user.username})`);

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      await userService.logAction(user.userId, 'retargeting_video1', user.currentStep);

      // Delay —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ rate limit
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failed++;
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${user.userId}:`, error);
    }
  }

  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}`);
  console.log(`   –û—à–∏–±–æ–∫: ${failed}`);
}

/**
 * –ö–∞–º–ø–∞–Ω–∏—è: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞—Å—Ç—Ä—è–≤—à–∏–º –Ω–∞ video2
 */
async function campaignStuckVideo2(userService: UserService) {
  console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –Ω–∞ video2...');

  const users = await userService.getUsersStuckAtStep('video2', 24);

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

  if (users.length === 0) {
    console.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏');
    return;
  }

  const message = `
üéÅ –¢—ã —Å–æ–≤—Å–µ–º –±–ª–∏–∑–∫–æ!

–û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ, –≥–¥–µ —è —Ä–∞—Å–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω—ã–π —Å–µ–∫—Ä–µ—Ç.

–ü–æ—Å–ª–µ –Ω–µ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ—ë –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ! üöÄ
  `;

  let sent = 0;
  let failed = 0;

  for (const user of users) {
    try {
      await bot.telegram.sendMessage(user.userId, message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –ì–æ—Ç–æ–≤!', callback_data: 'ready_for_more' }]
          ]
        }
      });
      sent++;
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${user.userId} (@${user.username})`);

      await userService.logAction(user.userId, 'retargeting_video2', user.currentStep);
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failed++;
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${user.userId}:`, error);
    }
  }

  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}`);
  console.log(`   –û—à–∏–±–æ–∫: ${failed}`);
}

/**
 * –ö–∞–º–ø–∞–Ω–∏—è: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É
 */
async function campaignAbandonedPayment(userService: UserService) {
  console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π...');

  const users = await userService.getUsersAbandonedPayment(24);

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

  if (users.length === 0) {
    console.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏');
    return;
  }

  const message = `
üí∞ –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å!

–¢—ã –±—ã–ª –≤ —à–∞–≥–µ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–µ–º—É –º–µ—Ç–æ–¥—É.

–ó–∞–≤–µ—Ä—à–∏—à—å –æ–ø–ª–∞—Ç—É —Å–µ–π—á–∞—Å? 

P.S. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ! ‚è∞
  `;

  let sent = 0;
  let failed = 0;

  for (const user of users) {
    try {
      await bot.telegram.sendMessage(user.userId, message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data: 'get_advantage' }]
          ]
        }
      });
      sent++;
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${user.userId} (@${user.username})`);

      await userService.logAction(user.userId, 'retargeting_payment', user.currentStep);
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failed++;
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${user.userId}:`, error);
    }
  }

  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}`);
  console.log(`   –û—à–∏–±–æ–∫: ${failed}`);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏
 */
async function showStats(userService: UserService) {
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏:\n');

  const stats = await userService.getFunnelStats();

  Object.entries(stats).forEach(([step, count]) => {
    console.log(`   ${step.padEnd(20)} ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  });

  console.log('');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ –æ–ø–ª–∞—Ç—É
 */
async function showConversion(userService: UserService) {
  console.log('üí∞ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –æ–ø–ª–∞—Ç—É:\n');

  const { total, paid, rate } = await userService.getConversionRate();

  console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:  ${total}`);
  console.log(`   –û–ø–ª–∞—Ç–∏–ª–∏:             ${paid}`);
  console.log(`   –ö–æ–Ω–≤–µ—Ä—Å–∏—è:            ${rate.toFixed(2)}%`);
  console.log('');
}

main().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
});
