#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Read the file
with open('src/receiptValidator.ts', 'r', encoding='utf-8') as f:
    content = f.read()

# 1. Update function signature to include currency parameter
old_signature = """export async function validateReceiptWithGemini(
  photoUrl: string,
  expectedAmount: number,
  expectedCardNumber: string
): Promise<ReceiptValidationResult> {"""

new_signature = """export async function validateReceiptWithGemini(
  photoUrl: string,
  expectedAmount: number,
  expectedCardNumber: string,
  currency: 'RUB' | 'UAH' = 'RUB'
): Promise<ReceiptValidationResult> {"""

content = content.replace(old_signature, new_signature)

# 2. Update error messages to use correct currency symbol
# Amount mismatch error
old_amount_error = """reason: `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.\\n\\nüí∞ –û–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedAmount} —Ä—É–±\\nüí≥ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: ${extractedAmount} —Ä—É–±`,"""

new_amount_error = """reason: `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.\\n\\nüí∞ –û–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedAmount} ${currency === 'UAH' ? '‚Ç¥' : '‚ÇΩ'}\\nüí≥ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: ${extractedAmount} ${currency === 'UAH' ? '‚Ç¥' : '‚ÇΩ'}`,"""

content = content.replace(old_amount_error, new_amount_error)

# 3. Find and update card number error message
old_card_error = """reason: `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\\n\\nüè¶ –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∞: ...${expectedLast4}\\nüí≥ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: ...${extractedCardLast4}`,"""

if old_card_error in content:
    # If exists, no change needed (no currency here)
    pass

# Write back
with open('src/receiptValidator.ts', 'w', encoding='utf-8') as f:
    f.write(content)

print("‚úÖ Currency parameter added to validateReceiptWithGemini!")
print("‚úÖ Error messages updated to show correct currency symbol!")
