import { AppDataSource } from './database';
import { User } from './entities/User';
import { UserAction } from './entities/UserAction';

export class UserService {
  private userRepository = AppDataSource.getRepository(User);
  private actionRepository = AppDataSource.getRepository(UserAction);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getOrCreateUser(
    userId: number,
    username?: string,
    firstName?: string,
    lastName?: string
  ): Promise<User> {
    let user = await this.userRepository.findOne({ where: { userId } });

    if (!user) {
      user = this.userRepository.create({
        userId,
        username,
        firstName,
        lastName,
        currentStep: 'start',
        hasPaid: false,
        lastActivityAt: new Date(),
      });
      await this.userRepository.save(user);
      console.log(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${userId} (@${username})`);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º lastActivityAt
      user.lastActivityAt = new Date();
      await this.userRepository.save(user);
    }

    return user;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUserStep(
    userId: number,
    step: User['currentStep']
  ): Promise<void> {
    await this.userRepository.update({ userId }, { 
      currentStep: step,
      lastActivityAt: new Date()
    });
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async setUserCurrency(userId: number, currency: 'RUB' | 'UAH'): Promise<void> {
    await this.userRepository.update({ userId }, { currency });
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
   */
  async markAsPaid(userId: number): Promise<void> {
    await this.userRepository.update({ userId }, {
      hasPaid: true,
      paidAt: new Date(),
      currentStep: 'completed'
    });
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async logAction(
    userId: number,
    action: string,
    step: string,
    metadata?: Record<string, any>
  ): Promise<void> {
    const userAction = this.actionRepository.create({
      userId,
      action,
      step,
      metadata,
    });
    await this.actionRepository.save(userAction);
  }

  /**
   * RETARGETING: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å—Ç—Ä—è–ª–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —à–∞–≥–µ
   * –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ video1, –Ω–æ –Ω–µ –ø–æ—à–ª–∏ –¥–∞–ª—å—à–µ
   */
  async getUsersStuckAtStep(step: User['currentStep'], hoursAgo: number = 24): Promise<User[]> {
    const cutoffDate = new Date();
    cutoffDate.setHours(cutoffDate.getHours() - hoursAgo);

    return await this.userRepository
      .createQueryBuilder('user')
      .where('user.currentStep = :step', { step })
      .andWhere('user.hasPaid = false')
      .andWhere('user.lastActivityAt < :cutoffDate', { cutoffDate })
      .getMany();
  }

  /**
   * RETARGETING: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—à–ª–∏ –¥–æ –æ–ø–ª–∞—Ç—ã, –Ω–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏
   */
  async getUsersAbandonedPayment(hoursAgo: number = 24): Promise<User[]> {
    const cutoffDate = new Date();
    cutoffDate.setHours(cutoffDate.getHours() - hoursAgo);

    return await this.userRepository
      .createQueryBuilder('user')
      .where('user.currentStep IN (:...paymentSteps)', {
        paymentSteps: ['payment_choice', 'waiting_receipt']
      })
      .andWhere('user.hasPaid = false')
      .andWhere('user.lastActivityAt < :cutoffDate', { cutoffDate })
      .getMany();
  }

  /**
   * ANALYTICS: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ—Ä–æ–Ω–∫–µ
   */
  async getFunnelStats(): Promise<Record<string, number>> {
    const stats = await this.userRepository
      .createQueryBuilder('user')
      .select('user.currentStep', 'step')
      .addSelect('COUNT(*)', 'count')
      .groupBy('user.currentStep')
      .getRawMany();

    const result: Record<string, number> = {};
    stats.forEach(stat => {
      result[stat.step] = parseInt(stat.count);
    });

    return result;
  }

  /**
   * ANALYTICS: –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –æ–ø–ª–∞—Ç—É
   */
  async getConversionRate(): Promise<{ total: number; paid: number; rate: number }> {
    const total = await this.userRepository.count();
    const paid = await this.userRepository.count({ where: { hasPaid: true } });
    const rate = total > 0 ? (paid / total) * 100 : 0;

    return { total, paid, rate };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞ —Å—Ç–∞—Ä—É—é –±–∞–∑—É)
   */
  async getAllUsers(): Promise<User[]> {
    return await this.userRepository.find();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤–æ—Ä–æ–Ω–∫—É (–¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ–ø—Ä–æ–¥–∞–∂)
   */
  async getCompletedUsers(): Promise<User[]> {
    return await this.userRepository.find({
      where: { hasPaid: true }
    });
  }
}
