import axios from 'axios';
import * as fs from 'fs';
import * as path from 'path';
import { logWithTimestamp } from './utils';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
export interface ReceiptValidationResult {
  isValid: boolean;
  confidence: number;
  extractedAmount?: number;
  extractedCardNumber?: string;
  reason?: string;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini Vision API
 * @param photoUrl - URL —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
 * @param expectedAmount - –æ–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
 * @param expectedCardNumber - –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
 * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function validateReceiptWithGemini(
  photoUrl: string,
  expectedAmount: number,
  expectedCardNumber: string,
  currency: 'RUB' | 'UAH' = 'RUB'
): Promise<ReceiptValidationResult> {
  try {
    logWithTimestamp('Starting receipt validation with Gemini', { photoUrl });

    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY not configured');
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageBuffer = await downloadImage(photoUrl);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    const base64Image = imageBuffer.toString('base64');

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
    const prompt = `
–ü—Ä–æ–≤–µ—Ä—å –ø–ª–∞—Ç–µ–∂–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é:

–û–∂–∏–¥–∞—é: ${expectedAmount}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É *${expectedCardNumber.slice(-4)}

–í–ê–ñ–ù–û - –≠–¢–û –ù–û–†–ú–ê–õ–¨–ù–û (–ù–ï –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ):
- –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –±–∞–Ω–∫–∞
- –õ—é–±–∞—è –¥–∞—Ç–∞ (–¥–∞–∂–µ —Å—Ç–∞—Ä–∞—è –∏–ª–∏ –±—É–¥—É—â–∞—è)
- –†–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≤ –æ–¥–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä—É–±–ª—è—Ö, –Ω–æ –≤–∞–ª—é—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è USD - —ç—Ç–æ –Ω–æ—Ä–º–∞ –¥–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã—Ö –∫–∞—Ä—Ç!)
- –õ—é–±—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞

–ú–û–®–ï–ù–ù–ò–ß–ï–°–¢–í–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –í–ò–ó–£–ê–õ–¨–ù–´–ï –ø—Ä–∏–∑–Ω–∞–∫–∏:
- –°–ª–µ–¥—ã —Ñ–æ—Ç–æ—à–æ–ø–∞ (–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, —Ä–∞–∑–º—ã—Ç–∏—è, –Ω–µ—á–µ—Ç–∫–∏–µ –∫—Ä–∞—è)
- –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
- –í–∏–¥–∏–º—ã–µ —Å–ª–µ–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–í–µ—Ä–Ω–∏ JSON (–¢–û–õ–¨–ö–û JSON, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞):
{
  "imageDescription": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "isReceipt": true/false,
  "amount": —á–∏—Å–ª–æ –∏–ª–∏ null,
  "cardNumber": "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã" –∏–ª–∏ null,
  "isFraud": true/false,
  "confidence": 0-100,
  "reason": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –í–ò–ó–£–ê–õ–¨–ù–´–• –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–¥–¥–µ–ª–∫–∏" –∏–ª–∏ null
}
`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ Gemini API v1
    const apiUrl = `https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=${apiKey}`;
    
    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            },
            {
              inline_data: {
                mime_type: 'image/jpeg',
                data: base64Image
              }
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.2,
        maxOutputTokens: 4096, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        topP: 0.8,
        topK: 40,
      }
    };

    logWithTimestamp('Sending request to Gemini API v1', { apiUrl: apiUrl.replace(apiKey, '***') });

    // Retry –º–µ—Ö–∞–Ω–∏–∑–º —Å exponential backoff –¥–ª—è 503 –æ—à–∏–±–æ–∫
    let response;
    let lastError;
    const maxRetries = 3;
    
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      try {
        response = await axios.post(apiUrl, requestBody, {
          headers: {
            'Content-Type': 'application/json',
          },
          timeout: 30000,
        });
        break; // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
      } catch (error: any) {
        lastError = error;
        if (error.response?.status === 503 && attempt < maxRetries - 1) {
          const delayMs = Math.pow(2, attempt) * 1000; // 1s, 2s, 4s
          logWithTimestamp(`Gemini API 503 error, retrying in ${delayMs}ms (attempt ${attempt + 1}/${maxRetries})`, {});
          await new Promise(resolve => setTimeout(resolve, delayMs));
        } else {
          throw error; // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
        }
      }
    }
    
    if (!response) {
      throw lastError;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞
    const finishReason = response.data?.candidates?.[0]?.finishReason;
    const text = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!text) {
      logWithTimestamp('Invalid Gemini API response', { 
        finishReason, 
        fullResponse: JSON.stringify(response.data, null, 2) 
      });
      
      if (finishReason === 'MAX_TOKENS') {
        throw new Error('Gemini response was cut off due to token limit. Try with a smaller image or simpler prompt.');
      }
      
      throw new Error('Invalid response format from Gemini API');
    }
    logWithTimestamp('Gemini response received', { textLength: text.length, fullText: text });

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç - –∏—â–µ–º JSON –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ
    let analysis;
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–∫–∏
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0]);
        logWithTimestamp('Parsed JSON from Gemini', analysis);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        analysis = JSON.parse(text);
        logWithTimestamp('Parsed JSON directly', analysis);
      }
    } catch (parseError) {
      logWithTimestamp('Failed to parse JSON from Gemini', { text, parseError });
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã
      return {
        isValid: false,
        confidence: 0,
        reason: `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç AI.\n\n–û—Ç–≤–µ—Ç AI: ${text.substring(0, 300)}...\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.`,
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const validationResult = validateAnalysis(
      analysis,
      expectedAmount,
      expectedCardNumber,
      currency
    );

    logWithTimestamp('Validation completed', validationResult);

    return validationResult;
  } catch (error) {
    logWithTimestamp('Error validating receipt', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
      isValid: false,
      confidence: 0,
      reason: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: ${error instanceof Error ? error.message : 'Unknown error'}`,
    };
  }
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
 * @param url - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns –±—É—Ñ–µ—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */
async function downloadImage(url: string): Promise<Buffer> {
  try {
    const response = await axios.get(url, {
      responseType: 'arraybuffer',
      timeout: 10000,
    });

    return Buffer.from(response.data);
  } catch (error) {
    throw new Error(`Failed to download image: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Gemini
 * @param analysis - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Gemini
 * @param expectedAmount - –æ–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞
 * @param expectedCardNumber - –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
 * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateAnalysis(
  analysis: any,
  expectedAmount: number,
  expectedCardNumber: string,
  currency: 'RUB' | 'UAH'
): ReceiptValidationResult {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–æ–æ–±—â–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π
  if (analysis.isReceipt === false) {
    const description = analysis.imageDescription || '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π';
    return {
      isValid: false,
      confidence: 0,
      reason: `‚ùå –≠—Ç–æ –Ω–µ –ø–ª–∞—Ç–µ–∂–Ω–∞—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è.\n\nüîç –ß—Ç–æ —è –≤–∏–∂—É –Ω–∞ —Ñ–æ—Ç–æ:\n${description}`,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
  if (analysis.isFraud === true) {
    const fraudDetails = analysis.reason || '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–¥–µ–ª–∫–∏';
    return {
      isValid: false,
      confidence: analysis.confidence || 0,
      reason: `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø–æ–¥–¥–µ–ª–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏!\n\nüîç –î–µ—Ç–∞–ª–∏:\n${fraudDetails}`,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
  const extractedAmount = analysis.amount;
  if (extractedAmount === null || extractedAmount === undefined) {
    const description = analysis.imageDescription || '–∫–≤–∏—Ç–∞–Ω—Ü–∏—è';
    return {
      isValid: false,
      confidence: analysis.confidence || 0,
      reason: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.\n\nüîç –ß—Ç–æ —è –≤–∏–∂—É:\n${description}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–∞ –Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.`,
    };
  }

  if (Math.abs(extractedAmount - expectedAmount) > 10) {
    return {
      isValid: false,
      confidence: analysis.confidence || 0,
      extractedAmount,
      reason: `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.

üí∞ –û–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedAmount} ${currency === 'UAH' ? '‚Ç¥' : '‚ÇΩ'}
üí≥ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: ${extractedAmount} ${currency === 'UAH' ? '‚Ç¥' : '‚ÇΩ'}`,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)
  const extractedCardNumber = analysis.cardNumber;
  const expectedLast4 = expectedCardNumber.replace(/\s/g, '').slice(-4);

  if (extractedCardNumber === null || extractedCardNumber === undefined) {
    return {
      isValid: false,
      confidence: analysis.confidence || 0,
      reason: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.`,
    };
  }

  const extractedLast4 = String(extractedCardNumber).replace(/\s/g, '').slice(-4);

  if (extractedLast4 !== expectedLast4) {
    return {
      isValid: false,
      confidence: analysis.confidence || 0,
      extractedCardNumber,
      reason: `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n\nüéØ –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∞: *${expectedLast4}\nüì± –ù–∞–π–¥–µ–Ω–æ –Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: *${extractedLast4}`,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  const confidence = analysis.confidence || 0;
  if (confidence < 60) {
    return {
      isValid: false,
      confidence,
      reason: '–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–ª–æ—Ö–æ —á–∏—Ç–∞—é—Ç—Å—è',
    };
  }

  // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
  return {
    isValid: true,
    confidence,
    extractedAmount,
    extractedCardNumber,
  };
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (fallback)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 */
export async function validateReceiptSimple(
  photoUrl: string,
  expectedAmount: number,
  expectedCardNumber: string
): Promise<ReceiptValidationResult> {
  logWithTimestamp('Using simple validation (fallback)', { photoUrl });

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é OCR –ø—Ä–æ–≤–µ—Ä–∫—É
  return {
    isValid: true,
    confidence: 50,
    reason: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞. –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è Gemini API.',
  };
}
