import { Telegraf, Context, Markup } from 'telegraf';
import { message } from 'telegraf/filters';
import * as dotenv from 'dotenv';
import * as fs from 'fs';
import { formatCardNumber, logWithTimestamp, delay } from './utils';
import { MESSAGES, BUTTON_LABELS, VIDEO_CAPTIONS, TIMING } from './constants';
import { validateReceiptWithGemini, ReceiptValidationResult } from './receiptValidator';
import { initializeDatabase } from './database';
import { UserService } from './userService';
import { trackUserAction, updateUserStep, setUserCurrency, markUserAsPaid } from './dbHelpers';

dotenv.config();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface UserState {
  step: 'start' | 'want_button' | 'video1' | 'continue_button' | 'video2' | 'ready_button' | 'video3' | 'advantage_button' | 'payment_choice' | 'waiting_receipt';
  userId: number;
  username?: string;
  currency?: 'RUB' | 'UAH';
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ + –ë–î –¥–ª—è persistence)
const userStates = new Map<number, UserState>();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserService (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ë–î)
let userService: UserService;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  botToken: process.env.BOT_TOKEN!,
  channelId: process.env.CHANNEL_ID!,
  channelInviteLink: process.env.CHANNEL_INVITE_LINK!,
  chatId: process.env.CHAT_ID!, // ID —á–∞—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
  paymentAmount: parseInt(process.env.PAYMENT_AMOUNT || '2000'),
  cardNumber: process.env.CARD_NUMBER!,
  paymentAmountUAH: parseInt(process.env.PAYMENT_AMOUNT_UAH || '1050'),
  cardNumberUAH: process.env.CARD_NUMBER_UAH || '5169155124283993',
  videos: [
    process.env.VIDEO_URL_1!,
    process.env.VIDEO_URL_2!,
    process.env.VIDEO_URL_3!
  ],
  videoFileIds: [
    process.env.VIDEO_1_FILE_ID,
    process.env.VIDEO_2_FILE_ID,
    process.env.VIDEO_3_FILE_ID
  ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(config.botToken);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;

  console.log(`User ${userId} (${username}) started the bot`);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userStates.set(userId, {
    step: 'start',
    userId,
    username
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
  await trackUserAction(userService, ctx, 'start', 'start');
  await updateUserStep(userService, userId, 'start');

  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –∫–∞–∫ —è –Ω–∞—É—á–∏–ª–∞—Å—å —Å–Ω–∏–º–∞—Ç—å —Ä–∏–ª—Å –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–¥—è—Ç –º–Ω–µ –ø–æ 100 –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø–æ 9 –∑–≤–æ–Ω–∫–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –º–æ–∏ —É—Å–ª—É–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ö–æ –º–Ω–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è —Ç–æ–ø—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é—Ç –º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫–∏. –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥–æ–π–¥–µ—Ç –ª–∏ –º–æ–π –º–µ—Ç–æ–¥ —Ç–µ–±–µ —Ç–æ–∂–µ?',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'ÔøΩ –•–æ—á—É!', callback_data: 'want_more' }]
        ]
      }
    }
  );
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
async function sendVideo(ctx: Context, videoIndex: number) {
  const userId = ctx.from!.id;
  const state = userStates.get(userId);

  if (!state) return;

  try {
    const videoPath = config.videos[videoIndex];
    
    logWithTimestamp(`Sending video ${videoIndex + 1}`, { userId, videoPath });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ URL
    if (videoPath.startsWith('http://') || videoPath.startsWith('https://')) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ URL
      await ctx.replyWithVideo(videoPath, {
        caption: `üìπ –í–∏–¥–µ–æ ${videoIndex + 1} –∏–∑ 3`
      });
    } else if (videoPath.startsWith('./') || videoPath.startsWith('/')) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      const { createReadStream } = await import('fs');
      const { Input } = await import('telegraf');
      
      await ctx.replyWithVideo(Input.fromLocalFile(videoPath), {
        caption: `üìπ –í–∏–¥–µ–æ ${videoIndex + 1} –∏–∑ 3`
      });
    } else {
      // –≠—Ç–æ file_id –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
      await ctx.replyWithVideo(videoPath, {
        caption: `üìπ –í–∏–¥–µ–æ ${videoIndex + 1} –∏–∑ 3`
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (videoIndex === 0) {
      state.step = 'video1';
    } else if (videoIndex === 1) {
      state.step = 'video2';
    } else if (videoIndex === 2) {
      state.step = 'video3';
    }

    userStates.set(userId, state);

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–∏–¥–µ–æ
    setTimeout(async () => {
      if (videoIndex < 2) {
        await sendVideo(ctx, videoIndex + 1);
      } else {
        // –í—Å–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
        await showPaymentButton(ctx);
      }
    }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –≤–∏–¥–µ–æ

  } catch (error) {
    console.error(`Error sending video ${videoIndex + 1}:`, error);
    await ctx.reply(`–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.`);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
async function showPaymentButton(ctx: Context) {
  const userId = ctx.from!.id;
  const state = userStates.get(userId);

  if (!state) return;

  state.step = 'payment_choice';
  userStates.set(userId, state);

  await ctx.reply(
    '‚úÖ –í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –≤–∏–¥–µ–æ!\n\n' +
    'üíé –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, ' +
    '–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üíµ –û–ø–ª–∞—Ç–∏—Ç—å —Ä—É–±–ª—è–º–∏ (2000 ‚ÇΩ)', callback_data: 'pay_rub' }],
          [{ text: 'üí¥ –û–ø–ª–∞—Ç–∏—Ç—å –≥—Ä–∏–≤–Ω–∞–º–∏ (1050 ‚Ç¥)', callback_data: 'pay_uah' }]
        ]
      }
    }
  );
}

// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// –í–û–†–û–ù–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

// –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É!"
bot.action('want_more', async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  if (!state) {
    await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }

  await ctx.answerCbQuery();
  
  state.step = 'video1';
  userStates.set(userId, state);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
  await trackUserAction(userService, ctx, 'click_want_more', 'video1');
  await updateUserStep(userService, userId, 'video1');

  await ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –∏ –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑ —É–∑–Ω–∞–µ—à—å —Å–µ–±—è, –∑–Ω–∞—á–∏—Ç —Ç—ã –≤—Å–µ –¥–µ–ª–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –≤–æ—Ç-–≤–æ—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å –ø–æ–¥–µ–ª–∏—Ç—Å—è –Ω–∞ "–î–æ" –∏ "–ü–æ—Å–ª–µ"!'
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ File ID
  const videoFileId = config.videoFileIds[0];
  
  if (videoFileId) {
    await ctx.replyWithDocument(videoFileId, {
      caption: 'üìπ –í–∏–¥–µ–æ 1 –∏–∑ 3'
    });
  } else {
    await ctx.reply('‚ö†Ô∏è –í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }

  await ctx.reply(
    '–ü–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∏–¥–µ–æ?',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ', callback_data: 'continue_watching' }]
        ]
      }
    }
  );
});

// –ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ"
bot.action('continue_watching', async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  if (!state) {
    await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }

  await ctx.answerCbQuery();
  
  state.step = 'video2';
  userStates.set(userId, state);

  await ctx.reply(
    '–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è —É–∑–Ω–∞—Ç—å –ø–æ—á–µ–º—É —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∫–æ–≥–¥–∞ —É –¥—Ä—É–≥–∏—Ö - –Ω–µ—Ç, –∏ –ø–æ—á–µ–º—É —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è —Ç–æ–∂–µ! –ü–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –∏ –∫–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.'
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ File ID
  const videoFileId = config.videoFileIds[1];
  
  if (videoFileId) {
    await ctx.replyWithDocument(videoFileId, {
      caption: 'üìπ –í–∏–¥–µ–æ 2 –∏–∑ 3'
    });
  } else {
    await ctx.reply('‚ö†Ô∏è –í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }

  await ctx.reply(
    '–ì–æ—Ç–æ–≤—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –ì–æ—Ç–æ–≤!', callback_data: 'ready_for_more' }]
        ]
      }
    }
  );
});

// –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤!"
bot.action('ready_for_more', async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  if (!state) {
    await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }

  await ctx.answerCbQuery();
  
  state.step = 'video3';
  userStates.set(userId, state);

  await ctx.reply(
    '–û—Ç–ª–∏—á–Ω–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ—Ç–Ω—è–º–∏ –∑–∞—è–≤–æ–∫ —Å —Ä–∏–ª—Å! –í —ç—Ç–æ–º –≤–∏–¥–µ–æ —Ç—ã —É–∑–Ω–∞–µ—à—å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–µ—Å –º–Ω–µ —É—Å–ø–µ—Ö, –∏ –∫–∞–∫–æ–µ –Ω–µ—á–µ—Å—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —è —Ç–µ–±–µ –¥–∞–º. –°–º–æ—Ç—Ä–∏ —Å–∫–æ—Ä–µ–µ!'
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç—å–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ File ID
  const videoFileId = config.videoFileIds[2];
  
  if (videoFileId) {
    await ctx.replyWithDocument(videoFileId, {
      caption: 'üìπ –í–∏–¥–µ–æ 3 –∏–∑ 3'
    });
  } else {
    await ctx.reply('‚ö†Ô∏è –í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }

  await ctx.reply(
    '–ì–æ—Ç–æ–≤—ã –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ!', callback_data: 'get_advantage' }]
        ]
      }
    }
  );
});

// –ö–Ω–æ–ø–∫–∞ "–ó–∞–±—Ä–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ!"
bot.action('get_advantage', async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  if (!state) {
    await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }

  await ctx.answerCbQuery();
  
  state.step = 'payment_choice';
  userStates.set(userId, state);

  await ctx.reply(
    'üíé –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üíµ –û–ø–ª–∞—Ç–∏—Ç—å —Ä—É–±–ª—è–º–∏ (2000 ‚ÇΩ)', callback_data: 'pay_rub' }],
          [{ text: 'üí¥ –û–ø–ª–∞—Ç–∏—Ç—å –≥—Ä–∏–≤–Ω–∞–º–∏ (1050 ‚Ç¥)', callback_data: 'pay_uah' }]
        ]
      }
    }
  );
});

// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// –û–ü–õ–ê–¢–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å —Ä—É–±–ª—è–º–∏"
bot.action('pay_rub', async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  if (!state) {
    await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }

  await ctx.answerCbQuery();

  state.step = 'waiting_receipt';
  state.currency = 'RUB';
  userStates.set(userId, state);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
  await trackUserAction(userService, ctx, 'choose_rub', 'waiting_receipt');
  await updateUserStep(userService, userId, 'waiting_receipt');
  await setUserCurrency(userService, userId, 'RUB');

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formattedCard = config.cardNumber.replace(/(\d{4})(?=\d)/g, '$1 ');

          await ctx.reply(
    'üí≥ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n' +
    `üí∞ –°—É–º–º–∞: **${config.paymentAmount} ‚ÇΩ**\n` +
    `üè¶ –ö–∞—Ä—Ç–∞: \`${formattedCard}\`\n` +
    'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: **Vitalii Smirnov**\n\n' +
    '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n' +
    'üì± **–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:**\n\n' +
    '**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¢-–±–∞–Ω–∫ –∏–ª–∏ –°–±–µ—Ä–±–∞–Ω–∫** ‚Äî –≤ –Ω–∏—Ö –µ—Å—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã.\n\n' +
    '**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n' +
    '1Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–≤ –¢-–±–∞–Ω–∫–µ: "–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã", –≤ –°–±–µ—Ä–±–∞–Ω–∫–µ: "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã")\n' +
    '2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Å—É–º–º—É\n' +
    '3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n' +
    '4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥\n\n' +
    'üí° –î—Ä—É–≥–∏–µ –±–∞–Ω–∫–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ "–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É"\n\n' +
    '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n' +
    'üì∏ **–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:**\n\n' +
    '‚úÖ –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏\n' +
    '‚úÖ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n' +
    '‚ö†Ô∏è **–ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ:**\n' +
    `‚Ä¢ –°—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ (${config.paymentAmount} ‚ÇΩ)\n` +
    '‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n' +
    '‚Ä¢ –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
    { parse_mode: 'Markdown' }
  );

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
  await ctx.reply(
    'üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –æ–ø–ª–∞—Ç–æ–π:',
    Markup.inlineKeyboard([
      [Markup.button.url('üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º', 'https://t.me/ADA_gii')]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –≥—Ä–∏–≤–Ω–∞–º–∏"
bot.action('pay_uah', async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  const state: UserState = userStates.get(userId) || { 
    step: 'start',
    userId,
    username
  };

  await ctx.answerCbQuery();

  state.step = 'waiting_receipt';
  state.currency = 'UAH';
  userStates.set(userId, state);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
  await trackUserAction(userService, ctx, 'choose_uah', 'waiting_receipt');
  await updateUserStep(userService, userId, 'waiting_receipt');
  await setUserCurrency(userService, userId, 'UAH');

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formattedCard = config.cardNumberUAH.replace(/(\d{4})(?=\d)/g, '$1 ');

  await ctx.reply(
    'üí≥ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n' +
    `üí∞ –°—É–º–º–∞: **${config.paymentAmountUAH} ‚Ç¥**\n` +
    `üè¶ –ö–∞—Ä—Ç–∞: \`${formattedCard}\`\n` +
    'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: **–ú–∏–∫–∏—Ç–∞—Å—å –Æ–ª—ñ—è –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞**\n\n' +
    'üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n' +
    '1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É\n' +
    '2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é\n' +
    '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n' +
    '‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ù–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–Ω–∞ —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è!\n\n' +
    'üëá –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —Å—é–¥–∞',
    { parse_mode: 'Markdown' }
  );

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
  await ctx.reply(
    'üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –æ–ø–ª–∞—Ç–æ–π:',
    Markup.inlineKeyboard([
      [Markup.button.url('üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º', 'https://t.me/ADA_gii')]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (—Ñ–æ—Ç–æ)
bot.on(message('photo'), async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  console.log(`Photo received from user ${userId}, current state:`, state);

  if (!state || state.step !== 'waiting_receipt') {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø" –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.');
    return;
  }

  await ctx.reply('üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É –∫–≤–∏—Ç–∞–Ω—Ü–∏—é...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —á–µ—Ä–µ–∑ Gemini AI
  const validationResult = await validateReceipt(ctx);

  if (!validationResult) {
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    return;
  }

  if (validationResult.isValid) {
    await ctx.reply('‚úÖ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏...');
    
    try {
      const channelInviteLink = await generateInviteLink(userId);
      const chatInviteLink = await generateChatInviteLink(userId);
      
      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –≤ –ë–î
      await markUserAsPaid(userService, userId);
      await trackUserAction(userService, ctx, 'payment_success', 'completed');
      
      await ctx.reply(
        'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n' +
        `üì∫ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:\n${channelInviteLink}\n\n` +
        `üí¨ –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º:\n${chatInviteLink}\n\n` +
        '‚è∞ –°—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 24 —á–∞—Å–∞\n' +
        'üë§ –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑\n\n' +
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! üöÄ'
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates.delete(userId);

    } catch (error) {
      console.error('Error generating invite links:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  } else {
    // –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ
    const imageDesc = validationResult.imageDescription || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏';
    const reason = validationResult.reason || '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –∏ —Å—É–º–º—É –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const userState = userStates.get(userId);
    const currency = userState?.currency || 'RUB';
    const expectedAmount = currency === 'UAH' ? config.paymentAmountUAH : config.paymentAmount;
    const expectedCard = currency === 'UAH' ? config.cardNumberUAH : config.cardNumber;
    const currencySymbol = currency === 'UAH' ? '‚Ç¥' : '‚ÇΩ';
    
    await ctx.reply(
      `üîç **–ß—Ç–æ —è –≤–∏–∂—É –Ω–∞ —Ñ–æ—Ç–æ:**\n${imageDesc}\n\n` +
      `‚ùå **–ü–æ—á–µ–º—É –Ω–µ –ø–æ–¥–æ—à–ª–æ:**\n${reason}\n\n` +
      `üìã **–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:**\n` +
      `‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å—É–º–º–∞ ${expectedAmount} ${currencySymbol}\n` +
      `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è (*${expectedCard.slice(-4)})\n` +
      `‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏\n` +
      `‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —Å–Ω–æ–≤–∞`,
      Markup.inlineKeyboard([
        [Markup.button.url('üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É', 'https://t.me/ADA_gii')]
      ])
    );
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
async function validateReceipt(ctx: Context): Promise<ReceiptValidationResult | null> {
  try {
    const photo = ctx.message && 'photo' in ctx.message ? ctx.message.photo : null;
    
    if (!photo || photo.length === 0) {
      return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    const fileId = photo[photo.length - 1].file_id;
    const file = await bot.telegram.getFile(fileId);
    
    if (!file.file_path) {
      logWithTimestamp('No file path available for photo');
      return null;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
    const photoUrl = `https://api.telegram.org/file/bot${config.botToken}/${file.file_path}`;
    
    logWithTimestamp('Validating receipt with Gemini', { 
      userId: ctx.from?.id, 
      fileId 
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª—é—Ç—ã
    const userId = ctx.from?.id;
    const userState = userId ? userStates.get(userId) : undefined;
    const currency = userState?.currency || 'RUB';
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
    const paymentAmount = currency === 'UAH' ? config.paymentAmountUAH : config.paymentAmount;
    const cardNumber = currency === 'UAH' ? config.cardNumberUAH : config.cardNumber;
    
    logWithTimestamp('Validating receipt', { currency, paymentAmount, cardNumber });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —á–µ—Ä–µ–∑ Gemini
    const validationResult = await validateReceiptWithGemini(
      photoUrl,
      paymentAmount,
      cardNumber,
      currency
    );

    logWithTimestamp('Validation result', validationResult);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–Ω–∞—Ä—É–∂–∏)
    return validationResult;
    
  } catch (error) {
    logWithTimestamp('Error in validateReceipt', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return null;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è invite-—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞
async function generateInviteLink(userId: number): Promise<string> {
  try {
    logWithTimestamp('Creating invite link', { userId, channelId: config.channelId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
    try {
      const chatMember = await bot.telegram.getChatMember(config.channelId, bot.botInfo!.id);
      logWithTimestamp('Bot status in channel', { status: chatMember.status });
      
      if (chatMember.status !== 'administrator' && chatMember.status !== 'creator') {
        throw new Error('Bot is not an administrator in the channel');
      }
    } catch (checkError) {
      logWithTimestamp('Error checking bot status', checkError);
      throw new Error('Bot is not added to the channel or lacks permissions. Please add bot as admin to the channel.');
    }
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é invite-—Å—Å—ã–ª–∫—É
    const inviteLink = await bot.telegram.createChatInviteLink(config.channelId, {
      member_limit: 1, // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      expire_date: Math.floor(Date.now() / 1000) + 86400 // 24 —á–∞—Å–∞
    });

    logWithTimestamp('Generated invite link', { userId, link: inviteLink.invite_link });
    
    return inviteLink.invite_link;
  } catch (error) {
    logWithTimestamp('Error generating invite link', error);
    throw error;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è invite-—Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–∞
async function generateChatInviteLink(userId: number): Promise<string> {
  try {
    logWithTimestamp('Creating chat invite link', { userId, chatId: config.chatId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
    try {
      const chatMember = await bot.telegram.getChatMember(config.chatId, bot.botInfo!.id);
      logWithTimestamp('Bot status in chat', { status: chatMember.status });
      
      if (chatMember.status !== 'administrator' && chatMember.status !== 'creator') {
        throw new Error('Bot is not an administrator in the chat');
      }
    } catch (checkError) {
      logWithTimestamp('Error checking bot status in chat', checkError);
      throw new Error('Bot is not added to the chat or lacks permissions. Please add bot as admin to the chat.');
    }
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é invite-—Å—Å—ã–ª–∫—É –¥–ª—è —á–∞—Ç–∞
    const inviteLink = await bot.telegram.createChatInviteLink(config.chatId, {
      member_limit: 1, // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      expire_date: Math.floor(Date.now() / 1000) + 86400 // 24 —á–∞—Å–∞
    });

    logWithTimestamp('Generated chat invite link', { userId, link: inviteLink.invite_link });
    
    return inviteLink.invite_link;
  } catch (error) {
    logWithTimestamp('Error generating chat invite link', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(message('text'), async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  if (!state) {
    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! üëã\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.'
    );
    return;
  }

  if (state.step === 'waiting_receipt') {
    await ctx.reply(
      'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.\n\n' +
      '–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î
const PORT = process.env.PORT || 3000;

async function startBot() {
  try {
    // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await initializeDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    // 2. –°–æ–∑–¥–∞–µ–º UserService
    userService = new UserService();
    console.log('‚úÖ UserService —Å–æ–∑–¥–∞–Ω');

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch({
      webhook: process.env.NODE_ENV === 'production' ? {
        domain: process.env.RAILWAY_PUBLIC_DOMAIN || 'localhost',
        port: Number(PORT)
      } : undefined
    });

    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log(`Environment: ${process.env.NODE_ENV}`);
    console.log(`Port: ${PORT}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

export default bot;
