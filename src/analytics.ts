/**
 * Analytics Dashboard
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ production –ë–î –Ω–∞ Railway –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run analytics              - –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
 * npm run analytics users        - –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
 * npm run analytics funnel       - –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
 * npm run analytics validation   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–π
 * npm run analytics failures     - –î–µ—Ç–∞–ª–∏ –æ—Ç–∫–∞–∑–æ–≤
 */

import { AppDataSource } from './database';
import { UserService } from './userService';

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
};

function log(message: string, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function section(title: string) {
  console.log('\n');
  log('‚ïê'.repeat(60), colors.bright);
  log(`  ${title}`, colors.bright + colors.cyan);
  log('‚ïê'.repeat(60), colors.bright);
}

async function getUsersReport(userService: UserService) {
  section('üìä –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò');
  
  const query = `
    SELECT 
      COUNT(*) as total,
      COUNT(CASE WHEN "hasPaid" = true THEN 1 END) as paid,
      COUNT(CASE WHEN "hasPaid" = false THEN 1 END) as not_paid,
      COUNT(CASE WHEN currency = 'RUB' THEN 1 END) as chose_rub,
      COUNT(CASE WHEN currency = 'UAH' THEN 1 END) as chose_uah
    FROM users;
  `;
  
  const result = await AppDataSource.query(query);
  const data = result[0];
  
  log(`\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${colors.bright}${data.total}${colors.reset}`);
  log(`‚îú‚îÄ –û–ø–ª–∞—Ç–∏–ª–∏: ${colors.green}${data.paid}${colors.reset} (${data.total > 0 ? Math.round(data.paid / data.total * 100) : 0}%)`);
  log(`‚îî‚îÄ –ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏: ${colors.yellow}${data.not_paid}${colors.reset} (${data.total > 0 ? Math.round(data.not_paid / data.total * 100) : 0}%)`);
  
  log(`\n–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã:`);
  log(`‚îú‚îÄ –†—É–±–ª–∏ (RUB): ${colors.blue}${data.chose_rub}${colors.reset}`);
  log(`‚îî‚îÄ –ì—Ä–∏–≤–Ω—ã (UAH): ${colors.blue}${data.chose_uah}${colors.reset}`);
}

async function getFunnelReport(userService: UserService) {
  section('üîÑ –í–û–†–û–ù–ö–ê –ö–û–ù–í–ï–†–°–ò–ò');
  
  const query = `
    SELECT 
      (SELECT COUNT(DISTINCT "userId") FROM user_actions WHERE action = 'start') as started,
      (SELECT COUNT(DISTINCT "userId") FROM user_actions WHERE action = 'click_want_more') as clicked_want_more,
      (SELECT COUNT(DISTINCT "userId") FROM user_actions WHERE action = 'click_continue_watching') as watched_video2,
      (SELECT COUNT(DISTINCT "userId") FROM user_actions WHERE action = 'click_ready_for_more') as watched_video3,
      (SELECT COUNT(DISTINCT "userId") FROM user_actions WHERE action = 'click_get_advantage') as clicked_advantage,
      (SELECT COUNT(DISTINCT "userId") FROM user_actions WHERE action IN ('choose_rub', 'choose_uah')) as chose_currency,
      (SELECT COUNT(DISTINCT "userId") FROM user_actions WHERE action = 'payment_success') as paid
  `;
  
  const result = await AppDataSource.query(query);
  const funnel = result[0];
  
  const started = parseInt(funnel.started);
  
  function showStep(label: string, count: number, prevCount: number) {
    const percentage = prevCount > 0 ? Math.round(count / prevCount * 100) : 0;
    const conversionFromStart = started > 0 ? Math.round(count / started * 100) : 0;
    const dropoff = prevCount - count;
    const dropoffPercent = prevCount > 0 ? Math.round(dropoff / prevCount * 100) : 0;
    
    log(`\n${label}: ${colors.bright}${count}${colors.reset} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    log(`‚îú‚îÄ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞: ${colors.green}${percentage}%${colors.reset}`);
    log(`‚îú‚îÄ –û—Ç –Ω–∞—á–∞–ª–∞ –≤–æ—Ä–æ–Ω–∫–∏: ${colors.cyan}${conversionFromStart}%${colors.reset}`);
    log(`‚îî‚îÄ –û—Ç–≤–∞–ª–∏–ª–æ—Å—å: ${colors.red}${dropoff}${colors.reset} (${dropoffPercent}%)`);
  }
  
  showStep('1Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ (/start)', started, started);
  showStep('2Ô∏è‚É£ –ù–∞–∂–∞–ª–∏ "–•–æ—á—É –±–æ–ª—å—à–µ" (video1)', parseInt(funnel.clicked_want_more), started);
  showStep('3Ô∏è‚É£ –ù–∞–∂–∞–ª–∏ "–°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ" (video2)', parseInt(funnel.watched_video2), parseInt(funnel.clicked_want_more));
  showStep('4Ô∏è‚É£ –ù–∞–∂–∞–ª–∏ "–ì–æ—Ç–æ–≤!" (video3)', parseInt(funnel.watched_video3), parseInt(funnel.watched_video2));
  showStep('5Ô∏è‚É£ –ù–∞–∂–∞–ª–∏ "–ó–∞–±—Ä–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ"', parseInt(funnel.clicked_advantage), parseInt(funnel.watched_video3));
  showStep('6Ô∏è‚É£ –í—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É', parseInt(funnel.chose_currency), parseInt(funnel.clicked_advantage));
  showStep('7Ô∏è‚É£ –û–ø–ª–∞—Ç–∏–ª–∏', parseInt(funnel.paid), parseInt(funnel.chose_currency));
  
  log(`\n${'‚îÄ'.repeat(40)}`);
  log(`${colors.bright}–ò–¢–û–ì–û–í–ê–Ø –ö–û–ù–í–ï–†–°–ò–Ø: ${colors.green}${started > 0 ? Math.round(parseInt(funnel.paid) / started * 100) : 0}%${colors.reset}`);
}

async function getValidationReport(userService: UserService) {
  section('‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ô');
  
  const query = `
    SELECT 
      (SELECT COUNT(*) FROM user_actions WHERE action = 'photo_rejected') as photos_rejected,
      (SELECT COUNT(*) FROM user_actions WHERE action = 'receipt_validation_failed') as validations_failed,
      (SELECT COUNT(*) FROM user_actions WHERE action = 'payment_success') as validations_passed
  `;
  
  const result = await AppDataSource.query(query);
  const data = result[0];
  
  const total = parseInt(data.photos_rejected) + parseInt(data.validations_failed) + parseInt(data.validations_passed);
  
  log(`\n–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: ${colors.bright}${total}${colors.reset}`);
  log(`‚îú‚îÄ –£—Å–ø–µ—à–Ω–æ: ${colors.green}${data.validations_passed}${colors.reset} (${total > 0 ? Math.round(data.validations_passed / total * 100) : 0}%)`);
  log(`‚îú‚îÄ –ù–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è: ${colors.red}${data.photos_rejected}${colors.reset} (${total > 0 ? Math.round(data.photos_rejected / total * 100) : 0}%)`);
  log(`‚îî‚îÄ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: ${colors.yellow}${data.validations_failed}${colors.reset} (${total > 0 ? Math.round(data.validations_failed / total * 100) : 0}%)`);
}

async function getFailuresReport(userService: UserService) {
  section('‚ùå –î–ï–¢–ê–õ–ò –û–¢–ö–ê–ó–û–í');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–∫–∞–∑–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
  const photoRejected = await AppDataSource.query(`
    SELECT metadata, timestamp 
    FROM user_actions 
    WHERE action = 'photo_rejected' 
    ORDER BY timestamp DESC 
    LIMIT 5
  `);
  
  const validationFailed = await AppDataSource.query(`
    SELECT metadata, timestamp 
    FROM user_actions 
    WHERE action = 'receipt_validation_failed' 
    ORDER BY timestamp DESC 
    LIMIT 5
  `);
  
  log(`\n${colors.yellow}–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∫–∞–∑–æ–≤ "–ù–ï-–∫–≤–∏—Ç–∞–Ω—Ü–∏—è":${colors.reset}`);
  if (photoRejected.length === 0) {
    log('  (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
  } else {
    photoRejected.forEach((row: any, i: number) => {
      const meta = row.metadata || {};
      log(`\n  ${i + 1}. ${new Date(row.timestamp).toLocaleString('ru-RU')}`);
      log(`     –ü—Ä–∏—á–∏–Ω–∞: ${meta.reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${meta.imageDescription || '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);
    });
  }
  
  log(`\n${colors.red}–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∫–∞–∑–æ–≤ "–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç":${colors.reset}`);
  if (validationFailed.length === 0) {
    log('  (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
  } else {
    validationFailed.forEach((row: any, i: number) => {
      const meta = row.metadata || {};
      log(`\n  ${i + 1}. ${new Date(row.timestamp).toLocaleString('ru-RU')}`);
      log(`     –ü—Ä–∏—á–∏–Ω–∞: ${meta.reason ? meta.reason.split('\n')[0] : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      log(`     –°—É–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞: ${meta.extractedAmount || '–Ω/–¥'}`);
      log(`     –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${meta.extractedCardNumber || '–Ω/–¥'}`);
      log(`     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: ${meta.confidence || '–Ω/–¥'}%`);
      log(`     –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ: ${meta.isFraud ? '–î–ê ‚ö†Ô∏è' : '–Ω–µ—Ç'}`);
    });
  }
}

async function getTopActionsReport(userService: UserService) {
  section('üìà –¢–û–ü –î–ï–ô–°–¢–í–ò–ô');
  
  const query = `
    SELECT action, COUNT(*) as count 
    FROM user_actions 
    GROUP BY action 
    ORDER BY count DESC
  `;
  
  const result = await AppDataSource.query(query);
  
  log('');
  result.forEach((row: any, i: number) => {
    const bar = '‚ñà'.repeat(Math.min(Math.round(row.count / 2), 40));
    log(`${(i + 1).toString().padStart(2)}. ${row.action.padEnd(30)} ${colors.blue}${bar}${colors.reset} ${row.count}`);
  });
}

async function getRecentUsersReport(userService: UserService) {
  section('üë• –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò');
  
  const query = `
    SELECT "userId", username, "firstName", "currentStep", currency, "hasPaid", "createdAt"
    FROM users 
    ORDER BY "createdAt" DESC 
    LIMIT 10
  `;
  
  const result = await AppDataSource.query(query);
  
  if (result.length === 0) {
    log('\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç');
    return;
  }
  
  log('');
  result.forEach((user: any, i: number) => {
    const status = user.hasPaid ? `${colors.green}‚úì –û–ø–ª–∞—Ç–∏–ª${colors.reset}` : `${colors.yellow}‚óã –ù–µ –æ–ø–ª–∞—Ç–∏–ª${colors.reset}`;
    const name = user.firstName || user.username || `User${user.userId}`;
    const currency = user.currency ? `(${user.currency})` : '';
    const date = new Date(user.createdAt).toLocaleString('ru-RU');
    
    log(`${(i + 1).toString().padStart(2)}. ${status} ${name} ${currency}`);
    log(`    ID: ${user.userId} | –®–∞–≥: ${user.currentStep} | ${date}`);
    log('');
  });
}

async function main() {
  const reportType = process.argv[2] || 'all';
  
  try {
    log(`\n${colors.bright}${colors.cyan}–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...${colors.reset}`);
    await AppDataSource.initialize();
    log(`${colors.green}‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞${colors.reset}`);
    
    const userService = new UserService();
    
    if (reportType === 'all' || reportType === 'users') {
      await getUsersReport(userService);
      await getRecentUsersReport(userService);
    }
    
    if (reportType === 'all' || reportType === 'funnel') {
      await getFunnelReport(userService);
    }
    
    if (reportType === 'all' || reportType === 'validation') {
      await getValidationReport(userService);
    }
    
    if (reportType === 'all' || reportType === 'failures') {
      await getFailuresReport(userService);
    }
    
    if (reportType === 'all' || reportType === 'actions') {
      await getTopActionsReport(userService);
    }
    
    section('‚úÖ –û–¢–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù');
    
    await AppDataSource.destroy();
    process.exit(0);
    
  } catch (error) {
    log(`\n${colors.red}‚ùå –û—à–∏–±–∫–∞:${colors.reset}`, colors.red);
    console.error(error);
    process.exit(1);
  }
}

main();
